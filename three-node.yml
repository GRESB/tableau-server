---
apiVersion: v1
kind: Service
metadata:
  name: tmp-tableau-server
  namespace: gresb
spec:
  publishNotReadyAddresses: true
  selector:
    app: tmp-tableau-server
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configfile
  namespace: gresb
data:
  config.json: |-
    {
      "configEntities": {
        "identityStore": {
          "_type": "identityStoreType",
          "type": "local"
        }
      },
      "topologyVersion" : {
        "nodes" : {
          "node1": {
                "services": {
                    "filestore": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "tabadmincontroller": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
    	            "clientfileservice": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "dataserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            },
                            {
                            "instanceId":"1"
                            }
                        ]
                    },
                    "cacheserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            },
                            {
                            "instanceId":"1"
                            }
                        ]
                    },
                    "vizqlserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            },
                            {
                            "instanceId":"1"
                            }
                        ]
                    },
                    "backgrounder": {
                        "instances":[
                            {
                            "instanceId":"0"
                            },
                            {
                            "instanceId":"1"
                            }
                        ]
                    },
                    "appzookeeper": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "pgsql": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "dataengine": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "licenseservice": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "searchserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "clustercontroller": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "tabsvc": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "vizportal": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "tabadminagent": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "clientfileservice": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "activemqserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "elasticserver": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    },
                    "gateway": {
                        "instances":[
                            {
                            "instanceId":"0"
                            }
                        ]
                    }
                }
            }
          }
        }
      }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: datadir
  namespace: gresb
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workerdir
  namespace: gresb
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workerdir2
  namespace: gresb
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
  namespace: gresb
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: aws-efs
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: primary
  namespace: gresb
  labels:
    app: tmp-tableau-server
spec:
  selector:
    matchLabels:
      app: tmp-tableau-server
  replicas: 1
  serviceName: tmp-tableau-server
  template:
    metadata:
      labels:
        app: tmp-tableau-server
    spec:
      tolerations:
        - key: "dedicated"
          value: "tableau"
          operator: "Equal"
          effect: "NoSchedule"
      securityContext:
        runAsUser: 999
        fsGroup: 998
        fsGroupChangePolicy: "OnRootMismatch"
      terminationGracePeriodSeconds: 120
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 172.20.0.10
        searches:
          - tmp-tableau-server.gresb.svc.cluster.local
          - gresb.svc.cluster.local
          - svc.cluster.local
          - cluster.local
        options:
          - name: ndots
            value: "5"
      containers:
      - name: server
        image: 510016332031.dkr.ecr.eu-central-1.amazonaws.com/tableau-server:latest 
        env:
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: tmp-tableau-single-node
              key: license_key
        - name: TABLEAU_USERNAME
          valueFrom:
            secretKeyRef:
              name: tmp-tableau-single-node
              key: tableau_username
        - name: TABLEAU_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tmp-tableau-single-node
              key: tableau_password
        resources:
          requests:
            memory: 60Gi
            cpu: 7
          limits:
            memory: 62Gi
            cpu: 7
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: configmount
          mountPath: /docker/config/config.json
          subPath: config.json
        - name: datamount
          mountPath: /var/opt/tableau
        - name: efs-volume
          mountPath: /docker/config/bootstrap
        imagePullPolicy: IfNotPresent
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /docker/server-ready-check
          initialDelaySeconds: 360
          periodSeconds: 30
          timeoutSeconds: 20
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - /docker/alive-check
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 30
      volumes:
      - name: configmount
        configMap:
            name: configfile
      - name: datamount
        persistentVolumeClaim:
            claimName: datadir
      - name: efs-volume
        persistentVolumeClaim:
            claimName: efs-claim
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker
  namespace: gresb
  labels:
    app: tmp-tableau-server
spec:
  selector:
    matchLabels:
      app: tmp-tableau-server
  replicas: 1
  serviceName: tmp-tableau-server
  template:
    metadata:
      labels:
        app: tmp-tableau-server
    spec:
      tolerations:
        - key: "dedicated"
          value: "tableau"
          operator: "Equal"
          effect: "NoSchedule"
      securityContext:
        runAsUser: 999
        fsGroup: 998
      terminationGracePeriodSeconds: 120
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 172.20.0.10
        searches:
          - tmp-tableau-server.gresb.svc.cluster.local
          - gresb.svc.cluster.local
          - svc.cluster.local
          - cluster.local
        options:
          - name: ndots
            value: "5"
      containers:
      - name: server
        image: 510016332031.dkr.ecr.eu-central-1.amazonaws.com/tableau-server:latest 
        env:
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: tmp-tableau-single-node
              key: license_key
        - name: BOOTSTRAP_INSTALL
          value: "1"
        resources:
          requests:
            memory: 60Gi
            cpu: 7
          limits:
            memory: 62Gi
            cpu: 8
        ports:
        - containerPort: 8080
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: efs-volume
          mountPath: /docker/config/bootstrap
        - name: workermount
          mountPath: /var/opt/tableau
      volumes:
      - name: efs-volume
        persistentVolumeClaim:
            claimName: efs-claim
      - name: workermount
        persistentVolumeClaim:
            claimName: workerdir
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker2
  namespace: gresb
  labels:
    app: tmp-tableau-server
spec:
  selector:
    matchLabels:
      app: tmp-tableau-server
  replicas: 1
  serviceName: tmp-tableau-server
  template:
    metadata:
      labels:
        app: tmp-tableau-server
    spec:
      tolerations:
        - key: "dedicated"
          value: "tableau"
          operator: "Equal"
          effect: "NoSchedule"
      securityContext:
        runAsUser: 999
        fsGroup: 998
      terminationGracePeriodSeconds: 120
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 172.20.0.10
        searches:
          - tmp-tableau-server.gresb.svc.cluster.local
          - gresb.svc.cluster.local
          - svc.cluster.local
          - cluster.local
        options:
          - name: ndots
            value: "5"
      containers:
      - name: server
        image: 510016332031.dkr.ecr.eu-central-1.amazonaws.com/tableau-server:latest 
        env:
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: tmp-tableau-single-node
              key: license_key
        - name: BOOTSTRAP_INSTALL
          value: "1"
        resources:
          requests:
            memory: 60Gi
            cpu: 7
          limits:
            memory: 62Gi
            cpu: 7
        ports:
        - containerPort: 8080
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: efs-volume
          mountPath: /docker/config/bootstrap
        - name: workermount
          mountPath: /var/opt/tableau
      volumes:
      - name: efs-volume
        persistentVolumeClaim:
            claimName: efs-claim
      - name: workermount
        persistentVolumeClaim:
            claimName: workerdir2
