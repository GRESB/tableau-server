# Default values for tableau-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: ghcr.io/gresb/tableau-server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  requests:
#    memory: 120Gi
#    cpu: 12
#  limits:
#    memory: 126Gi
#    cpu: 16


# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

terminationGracePeriodSeconds: 120

dns:
  clusterDomain: cluster.local

tableauServer:
  licensesSecretNameSuffix: licenses
  adminUserSecretNameSuffix: admin-user
  dataDir:
    capacity: 100Gi
  bootstrapDir:
    capacity: 10Mi
    storageClassName: aws-efs
  config: |-
    {
      "configEntities": {
        "identityStore": {
          "_type": "identityStoreType",
          "type": "local"
        }
      }
    }
  primary:
    livenessProbe:
      exec:
        command:
          - /bin/sh
          - -c
          - /docker/alive-check
      initialDelaySeconds: 600
      periodSeconds: 60
      timeoutSeconds: 30
    readinessProbe:
      exec:
        command:
          - /bin/sh
          - -c
          - /docker/server-ready-check
      initialDelaySeconds: 360
      periodSeconds: 30
      timeoutSeconds: 20
  worker:
    livenessProbe: {}
    readinessProbe: {}
