# Default values for tableau-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: ghcr.io/gresb/tableau-server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  requests:
#    memory: 120Gi
#    cpu: 12
#  limits:
#    memory: 126Gi
#    cpu: 16


# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

terminationGracePeriodSeconds: 120

dns:
  clusterDomain: cluster.local

tableauServer:
  licensesSecretNameSuffix: licenses
  adminUserSecretNameSuffix: admin-user
  dataDir:
    capacity: 100Gi
  bootstrapDir:
    capacity: 10Mi
    storageClassName: aws-efs
  config: |-
    {
      "configEntities": {
        "identityStore": {
          "_type": "identityStoreType",
          "type": "local"
        }
      }
    }
  primary:
    livenessProbe:
      exec:
        command:
          - /bin/sh
          - -c
          - /docker/alive-check
      initialDelaySeconds: 600
      periodSeconds: 60
      timeoutSeconds: 30
    readinessProbe:
      exec:
        command:
          - /bin/sh
          - -c
          - /docker/server-ready-check
      initialDelaySeconds: 360
      periodSeconds: 30
      timeoutSeconds: 20
  worker:
    replicas: 2
    # disable bootstrapping when the cluster is already bootstrapped
    # NB: this is useful when re-installing over an existing state
    bootstrap: true
    probes:
      # disable pod probes for workers for initial cluster bootstrap
      # NB: this is useful when installing for the first time, or re-installing
      enabled: true
    livenessProbe: {}
    readinessProbe: {}
  scripts:
    # If setup-hook.sh script is present, this script will be executed by a post-instal and post-upgrade helm hook
    setup-hook.sh: |
      #!/bin/bash

      SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

      say() {
        echo
        echo "==> ${1}"
        echo
      }

      set -euo pipefail
      IFS=$'\n\t '

      for script_file in "${SCRIPT_DIR}"/configure-*.sh; do
        say "Executing ${script_file}"
        ${script_file}
      done
    configure-crond.sh: |
      #!/bin/bash

      say() {
        echo
        echo "==> ${1}"
        echo
      }

      set -euo pipefail
      IFS=$'\n\t'

      say "Running setup job on ${HOSTNAME}";
      supervisord_dir="/var/opt/tableau/tableau_server/supervisord";
      supervisord_sock="${supervisord_dir}/supervisord.sock";
      crontab "${DOCKER_CONFIG}/customer-files/crontab";
      if [[ ! -f "${supervisord_dir}/units/crond.conf" ]]; then
        say "Copying supervisord config for crond";
        cp "${DOCKER_CONFIG}/customer-files/crond.conf" "${supervisord_dir}/units/";
      fi;
      if [[ $(supervisorctl -s "unix://${supervisord_sock}" avail) != *"crond"* ]]; then
        say "Adding crond to supervisord";
        supervisorctl -s "unix://${supervisord_sock}" reread;
        supervisorctl -s "unix://${supervisord_sock}" add crond;
      fi;
      say "Setup complete";
  fluentd:
    enable: false
    name: "fluentd"
    image:
      repository: fluent/fluentd
      tag: v1.17-1
      pullPolicy: IfNotPresent
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
    envVars:
    - name: FLUENTD_CONF
      value: "fluentd.conf"
    volumeMounts: []
    # data volume is mounted at same path in tableau container
    logsVolMountPath: "/var/opt/tableau"
    config:
    # This config only pulls the individual service log out of the tableau container and push it to standard output
      fluentd.conf: |
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/apigateway/*.log
          pos_file /tmp/apigateway.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.apigateway.*"
          format none
        </source>
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/clustercontroller/*.log
          pos_file /tmp/clustercontroller.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.clustercontroller.*"
          format none
        </source>
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/dataserver/*.log
          pos_file /tmp/dataserver.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.dataserver.*"
          format none
        </source>
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/tabadmincontroller/*.log
          pos_file /tmp/tabadmincontroller.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.tabadmincontroller.*"
          format none
        </source>
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/filestore/*.log
          pos_file /tmp/filestore.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.filestore.*"
          format none
        </source>
        <source>
          @type tail
          path /var/opt/tableau/tableau_server/data/tabsvc/logs/pgsql/*.log
          pos_file /tmp/pgsql.pos
          tag "#{ENV['POD_NAMESPACE']}.#{ENV['POD_NAME']}.#{ENV['POD_UUID']}.tableau.pgsql.*"
          format none
        </source>
        <match **>
          @type stdout
        </match>
